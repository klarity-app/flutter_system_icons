// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `eq`, `fmt`

bool smokeTest() => RustLib.instance.api.crateApiCommonSmokeTest();

/// Represents a system icon encoded in Base64 format.
class SystemIcon {
  final String data;
  final int height;
  final int width;

  const SystemIcon({
    required this.data,
    required this.height,
    required this.width,
  });

  @override
  int get hashCode => data.hashCode ^ height.hashCode ^ width.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SystemIcon &&
          runtimeType == other.runtimeType &&
          data == other.data &&
          height == other.height &&
          width == other.width;
}

/// Service for retrieving system icons.
class SystemIconService {
  const SystemIconService();

  /// Retrieves a system icon for the given bundle identifier (macOS only).
  static SystemIcon getIconForBundle({required String bundleIdentifier}) =>
      RustLib.instance.api.crateApiCommonSystemIconServiceGetIconForBundle(
          bundleIdentifier: bundleIdentifier);

  /// Retrieves a system icon for the given file path.
  static SystemIcon getIconForFile({required String path}) =>
      RustLib.instance.api
          .crateApiCommonSystemIconServiceGetIconForFile(path: path);

  @override
  int get hashCode => 0;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SystemIconService && runtimeType == other.runtimeType;
}
